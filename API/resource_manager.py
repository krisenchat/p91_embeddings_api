import gc
import threading
import time

from InstructorEmbedding import INSTRUCTOR

global model


class ResourceManager:
    """Class symbiotic to the API, manages vital components to the application. In this case, controls the instantiation
    of the embeddings model and its periodic reload"""

    def __init__(self):
        self.model = self.load_model()
        self.reload_thread = threading.Thread(target=self.schedule_model_reload, daemon=True)
        self.reload_thread.start()

    def load_model(self):
        """Loads the embedding model (as of now the type of model is the same, if necessary for the future, the method
        can be changed to allow different models"""
        model = INSTRUCTOR('hkunlp/instructor-large')
        return model

    def reload_model(self):
        """Calls the garbage collector periodically to clean any remaining objects generated by the model after
        embedding texts"""
        gc.collect()
        # Reload the model
        self.model = self.load_model()
        print("Model reloaded successfully")

    def schedule_model_reload(self):
        while True:
            time.sleep(1800)  # Sleep for half an hour (1800 seconds)
            self.reload_model()
